/*
 * Copyright 2011 SecondMarket Labs, LLC.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at  http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and limitations under the License.
 */

package org.mongeez.dao

import com.mongodb.BasicDBObject
import com.mongodb.DB
import com.mongodb.DBCollection
import com.mongodb.Mongo
import com.mongodb.MongoClient
import com.mongodb.MongoCredential
import com.mongodb.QueryBuilder
import com.mongodb.WriteConcern
import org.apache.commons.lang3.time.DateFormatUtils
import org.mongeez.MongoAuth
import org.mongeez.commands.ChangeSet

class MongeezDao(mongo: Mongo, databaseName: String, auth: MongoAuth? = null) {
    private val db: DB
    private var changeSetAttributes = emptyList<ChangeSetAttribute>()

    private val mongeezCollection: DBCollection
        get() = db.getCollection("mongeez")

    init {
        val credentials = auth?.let {
            if (it.authDb == null || it.authDb == databaseName) {
                listOf(MongoCredential.createCredential(it.username, databaseName, it.password.toCharArray()))
            } else {
                listOf(MongoCredential.createCredential(it.username, it.authDb, it.password.toCharArray()))
            }
        } ?: emptyList()

        val client = MongoClient(mongo.serverAddressList, credentials)
        db = client.getDB(databaseName)
        configure()
    }

    private fun configure() {
        addTypeToUntypedRecords()
        loadConfigurationRecord()
        dropObsoleteChangeSetExecutionIndices()
        ensureChangeSetExecutionIndex()
    }

    private fun addTypeToUntypedRecords() {
        val q = QueryBuilder().put("type").exists(false).get()
        val o = BasicDBObject("\$set", BasicDBObject("type", RecordType.changeSetExecution.name))
        mongeezCollection.update(q, o, false, true, WriteConcern.SAFE)
    }

    private fun loadConfigurationRecord() {
        val q = QueryBuilder().put("type").`is`(RecordType.configuration.name).get()
        val configRecord = mongeezCollection.findOne(q) ?: createNewConfigRecord()
        val supportResourcePath = configRecord.get("supportResourcePath")
        changeSetAttributes =
                if (java.lang.Boolean.TRUE == supportResourcePath) {
                    DEFAULT_CHANGE_SET_ATTRIBUTES + ChangeSetAttribute.resourcePath
                } else {
                    DEFAULT_CHANGE_SET_ATTRIBUTES
                }
    }

    private fun createNewConfigRecord(): BasicDBObject {
        val configRecord = if (mongeezCollection.count() > 0L) {
            // We have pre-existing records, so don't assume that they support the latest features
            BasicDBObject()
                    .append("type", RecordType.configuration.name)
                    .append("supportResourcePath", false)
        } else {
            BasicDBObject()
                    .append("type", RecordType.configuration.name)
                    .append("supportResourcePath", true)
        }
        mongeezCollection.insert(configRecord, WriteConcern.SAFE)
        return configRecord
    }

    /**
     * Removes indices that were generated by versions before 0.9.3, since they're not supported by MongoDB 2.4+
     */
    private fun dropObsoleteChangeSetExecutionIndices() {
        val indexName = "type_changeSetExecution_file_1_changeId_1_author_1_resourcePath_1"
        val collection = mongeezCollection
        for (dbObject in collection.indexInfo) {
            if (indexName == dbObject.get("name")) {
                collection.dropIndex(indexName)
            }
        }
    }

    private fun ensureChangeSetExecutionIndex() {
        val keys = BasicDBObject()
        keys.append("type", 1)
        for (attribute in changeSetAttributes) {
            keys.append(attribute.name, 1)
        }
        mongeezCollection.createIndex(keys)
    }

    fun wasExecuted(changeSet: ChangeSet): Boolean {
        val query = BasicDBObject()
        query.append("type", RecordType.changeSetExecution.name)
        for (attribute in changeSetAttributes) {
            query.append(attribute.name, attribute.getAttributeValue(changeSet))
        }
        return mongeezCollection.count(query) > 0
    }

    fun runScript(code: String) {
        db.eval(code)
    }

    private fun executeCommand(command: String) {
        try {
            val p: Process = Runtime.getRuntime().exec(arrayOf("bash", "-c", command))
            p.waitFor()
        } catch (e: Exception) {
            e.printStackTrace()
        }
    }

    fun logChangeSet(changeSet: ChangeSet) {
        val dbObject = BasicDBObject()
        dbObject.append("type", RecordType.changeSetExecution.name)
        for (attribute in changeSetAttributes) {
            dbObject.append(attribute.name, attribute.getAttributeValue(changeSet))
        }
        dbObject.append("date", DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.format(System.currentTimeMillis()))
        mongeezCollection.insert(dbObject, WriteConcern.SAFE)
    }

    private companion object {
        val DEFAULT_CHANGE_SET_ATTRIBUTES = listOf(ChangeSetAttribute.file, ChangeSetAttribute.changeId, ChangeSetAttribute.author)
    }
}
